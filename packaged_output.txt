=== Project Structure ===
  |-  .
  |-  |LICENSE
  |-  |README.md
  |-  |bin
  |-  |  |aipack
  |-  |img
  |-  |  |cat-mascot.webp
  |-  |packaged_output.txt
  |-  |tests
  |-  |  |aipack_tests.bats

=== LICENSE ===
MIT License

Copyright (c) 2024 saintpetejackboy

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
=== bin/aipack ===
#!/usr/bin/env bash

VERSION="1.4.0"
DEFAULT_OUTPUT="packaged_output.txt"
REMOVE_COMMENTS=false
LOG_LEVEL="INFO"
INCLUDE_PATTERNS=()
EXCLUDE_PATTERNS=("vendor" "*.png" "*.jpg" "*.jpeg" "*.gif" "*.bmp" "*.svg" "*.webp" "*.ico")
INCLUDE_HIDDEN=false
INCLUDE_NO_EXT=true

# Logging levels
declare -A LOG_LEVELS=( ["DEBUG"]=0 ["INFO"]=1 ["WARN"]=2 ["ERROR"]=3 )

log() {
    local level=$1
    local message=$2
    if [ ${LOG_LEVELS[$level]} -ge ${LOG_LEVELS[$LOG_LEVEL]} ]; then
        echo "[$(date +"%Y-%m-%d %H:%M:%S")] [$level] $message"
    fi
}

print_banner() {
    echo "aipack - Project Packager"
    echo "Version ${VERSION}"
    echo
}

usage() {
    echo "Usage: $(basename "$0") [options]"
    echo
    echo "Options:"
    echo "  -d <dir>       Directory to package (default: current directory)"
    echo "  -o <output>    Output file name (default: $DEFAULT_OUTPUT)"
    echo "  -e <ext>       File extension to include (can be used multiple times)"
    echo "  -r             Remove comments"
    echo "  -i <pattern>   Include pattern (can be used multiple times)"
    echo "  -x <pattern>   Exclude pattern (can be used multiple times)"
    echo "  -v <level>     Log level (DEBUG, INFO, WARN, ERROR)"
    echo "  -H             Include hidden files and directories"
    echo "  -h             Show this help message"
    echo
}

parse_args() {
    while getopts "d:o:e:ri:x:v:Hh" opt; do
        case $opt in
            d) DIR=$OPTARG ;;
            o) OUTPUT=$OPTARG ;;
            e) EXTENSIONS+=("$OPTARG") ;;
            r) REMOVE_COMMENTS=true ;;
            i) INCLUDE_PATTERNS+=("$OPTARG") ;;
            x) EXCLUDE_PATTERNS+=("$OPTARG") ;;
            v) LOG_LEVEL=${OPTARG^^} ;;
            H) INCLUDE_HIDDEN=true ;;
            h) usage; exit 0 ;;
            *) usage; exit 1 ;;
        esac
    done

    DIR=${DIR:-.}
    if [[ ! -d $DIR ]]; then
        log "ERROR" "Directory '$DIR' not found."
        exit 1
    fi

    OUTPUT=${OUTPUT:-$DEFAULT_OUTPUT}
    OUTPUT_PATH=$(realpath "$DIR/$OUTPUT")

    if [ ${#EXTENSIONS[@]} -eq 0 ]; then
        EXTENSIONS=("py" "js" "html" "css" "php" "java" "c" "cpp" "h" "ts" "jsx" "tsx" "sh" "bash")
    fi

    if [[ -z "${LOG_LEVELS[$LOG_LEVEL]}" ]]; then
        log "ERROR" "Invalid log level '$LOG_LEVEL'."
        exit 1
    fi
}

generate_project_structure() {
    log "INFO" "Generating project structure..."
    {
        echo "=== Project Structure ==="
        if [ "$INCLUDE_HIDDEN" = false ]; then
            find "$DIR" \( ! -path '*/.*' -o -path "$DIR" \) -print0 | sort -z | sed -z 's/^/  /' | while IFS= read -r -d '' item; do
                if [ -d "$item" ]; then
                    echo "${item#$DIR}" | sed -e "s|^/||" -e 's/[^-][^\/]*\//  |/g' -e 's/|\([^ ]\)/|-\1/'
                else
                    echo "${item#$DIR}" | sed -e "s|^/||" -e 's/[^-][^\/]*\//  |/g' -e 's/\(.*\)/  |-\1/'
                fi
            done
        else
            find "$DIR" -print0 | sort -z | sed -z 's/^/  /' | while IFS= read -r -d '' item; do
                if [ -d "$item" ]; then
                    echo "${item#$DIR}" | sed -e "s|^/||" -e 's/[^-][^\/]*\//  |/g' -e 's/|\([^ ]\)/|-\1/'
                else
                    echo "${item#$DIR}" | sed -e "s|^/||" -e 's/[^-][^\/]*\//  |/g' -e 's/\(.*\)/  |-\1/'
                fi
            done
        fi
        echo
    } >> "$OUTPUT_PATH"
}


build_find_cmd() {
    FIND_CMD=(find "$DIR")

    if [ "$INCLUDE_HIDDEN" = false ]; then
        FIND_CMD+=( \( ! -path '*/.*' -o -path "$DIR" \) )
    fi

    FIND_CMD+=( -type f )

    if [ ${#INCLUDE_PATTERNS[@]} -gt 0 ] || [ ${#EXTENSIONS[@]} -gt 0 ]; then
        FIND_CMD+=( \( )
        for PATTERN in "${INCLUDE_PATTERNS[@]}"; do
            FIND_CMD+=( -iname "$PATTERN" -o )
        done
        for EXT in "${EXTENSIONS[@]}"; do
            FIND_CMD+=( -iname "*.$EXT" -o )
        done
        if [ "$INCLUDE_NO_EXT" = true ]; then
            FIND_CMD+=( -iname "*" ! -name "*.*" -o )
        fi
        FIND_CMD=( "${FIND_CMD[@]::${#FIND_CMD[@]}-1}" )  # Remove last -o
        FIND_CMD+=( \) )
    fi

    for PATTERN in "${EXCLUDE_PATTERNS[@]}"; do
        FIND_CMD+=( ! -iname "$PATTERN" )
    done

    FIND_CMD+=( ! -path "$OUTPUT_PATH" )
}

process_files() {
    log "INFO" "Processing files..."
    > "$OUTPUT_PATH"  # Clear the output file before writing

    generate_project_structure

    while IFS= read -r FILE; do
        REL_PATH=${FILE#$DIR/}
        echo "=== $REL_PATH ===" >> "$OUTPUT_PATH"
        if [ "$REMOVE_COMMENTS" = true ]; then
            remove_comments "$FILE" >> "$OUTPUT_PATH"
        else
            cat "$FILE" >> "$OUTPUT_PATH"
        fi
        echo >> "$OUTPUT_PATH"
    done < <("${FIND_CMD[@]}" | sort)
}

remove_comments() {
    local file=$1
    local ext="${file##*.}"
    case "$ext" in
        py)
            sed -E 's/^[[:space:]]*#.*$//g; /^[[:space:]]*$/d' "$file"
            ;;
        js|ts|jsx|tsx|c|cpp|h|java|sh|bash)
            sed -E 's://.*$::g; /\/\*/,/\*\//d' "$file" | tr -d '\n' | sed -E 's/[[:space:]]+/ /g'
            ;;
        html|php)
            sed -E '/<!--/,/-->/d' "$file" | tr -d '\n' | sed -E 's/[[:space:]]+/ /g'
            ;;
        css)
            sed -E '/\/\*/,/\*\//d' "$file" | tr -d '\n' | sed -E 's/[[:space:]]+/ /g'
            ;;
        *)
            sed '/^[[:space:]]*$/d' "$file" | tr -d '\n' | sed -E 's/[[:space:]]+/ /g'
            ;;
    esac
}

main() {
    parse_args "$@"
    print_banner
    log "INFO" "Starting aipack in directory '$DIR'..."
    build_find_cmd
    process_files
    log "INFO" "Packaged code saved to $OUTPUT_PATH"
}

main "$@"
